{"name":"Logging","tagline":"Provides logging facility inspired by SLF4J in Java","body":"Logging\r\n=======\r\n\r\n**Logging** is a logging facility written in [CoffeeScript](http://coffeescript.org/) based on the famous [SLF4J framework](http://www.slf4j.org/) known from Java.\r\n\r\n\r\nUsage\r\n-----\r\nExample usage in **CoffeeScript** (Javascript usage see below):\r\n\r\n```coffeescript\r\nLog = require 'Logging'\r\n\r\n# Create new Log instance with the name my-log-name and default log level INFO\r\nlog = new Log 'my-log-name'\r\n\r\n# Ordinary logging\r\nlog.info 'First log message'\r\n\r\nlog.debug 'Not displayed due to lower log level'\r\n\r\n# Output all levels\r\nlog.level = Log.Level.ALL\r\n\r\nlog.debug 'This is now {} by {}', 'displayed', log.name\r\n# Output: This is now displayed by my-log-name\r\n\r\nlog.debug 'Display arguments in any order: {1} and {0} and again {1}', 14, 36\r\n# Output: Display arguments in any order: 36 and 14 and again 36\r\n\r\n# Function is only executed if logging actually happens, should be used for expensive operations or any non-trivial arguments\r\nlog.debug -> JSON.stringify { foo: 'bar' }\r\n# Output: {\"foo\":\"bar\"}\r\n\r\n# Asynchronous logging after two seconds\r\nlog.debug (done) ->\r\n    setTimeout ->\r\n        done JSON.stringify { abc: 'xyz' }\r\n    , 2000\r\n# Output: {\"abc\":\"xyz\"}\r\n```\r\n\r\nExample usage in **Javascript**:\r\n\r\n```javascript\r\nvar Log = require(\"Logging\"),\r\n\r\n\t// Create new Log instance with the name my-log-name and default log level INFO\r\n\tlog = new Log(\"my-log-name\");\r\n\r\n// Ordinary logging\r\nlog.info(\"First log message\");\r\n\r\nlog.debug(\"Not displayed due to lower log level\");\r\n\r\n// Output all levels\r\nlog.level = Log.Level.ALL;\r\n\r\nlog.debug(\"This is now {} by {}\", \"displayed\", log.name);\r\n// Output: This is now displayed by my-log-name\r\n\r\nlog.debug(\"Display arguments in any order: {1} and {0} and again {1}\", 14, 36);\r\n// Output: Display arguments in any order: 36 and 14 and again 36\r\n\r\n// Function is only executed if logging actually happens, should be used for expensive operations or any non-trivial arguments\r\nlog.debug(function() {\r\n\treturn JSON.stringify({ foo: \"bar\" });\r\n});\r\n// Output: {\"foo\":\"bar\"}\r\n\r\n// Asynchronous logging after two seconds\r\nlog.debug(function(done) {\r\n\tsetTimeout(function() {\r\n\t\tdone(JSON.stringify({ abc: \"xyz\" }));\r\n\t}, 2000);\r\n});\r\n// Output: {\"abc\":\"xyz\"}\r\n```\r\n\r\n\r\nConfiguration\r\n-------------\r\nThe auto-configuration looks for a file named **logconf.json** in the current or parent directories.\r\n\r\nYou can pass a custom file name or JSON config object to the *Log.init()* method **before** Log instances are created.\r\n\r\nThe JSON configuration has the following structure (all entries are optional):\r\n\r\n```json\r\n{\r\n\t\"adapters\": [\r\n\t\t{\r\n\t\t\t\"type\": \"ConsoleAdapter\",\r\n\t\t\t\"min\":  \"DEBUG\",\r\n\t\t\t\"max\":  \"WARN\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"type\": \"FileAdapter\",\r\n\t\t\t\"min\":  \"WARN\",\r\n\t\t\t\"max\":  \"FATAL\",\r\n\t\t\t\"file\": \"error.log\",\r\n\t\t\t\"opts\": {\r\n\t\t\t\t\"overwrite\": true\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\t\r\n\t\"levels\": {\r\n\t\t\"\": \"INFO\",\r\n\t\t\"org.foo\": \"WARN\",\r\n\t\t\"my.app\": \"ALL\",\r\n\t\t\"my.app.sub-module\": \"INFO\"\r\n\t}\r\n}\r\n```\r\n\r\nWith *levels[\"\"]* you can set the default log level for all logs as fall-back.\r\n\r\n\r\nLog constructor\r\n-----------\r\n`log = new Log(name, [level], [adapter])`\r\n\r\n* **name** The required logger name used for the output line\r\n* *level* Optionally initialize this logger to the given level instead of *Log.DEFAULT_LEVEL* (defaults to *Log.Level.INFO*)\r\n* *adapter* Optionally use adapter for this logger instead of *Log.DEFAULT_ADAPTER* (defaults to *ConsoleAdapter*)\r\n\r\n\r\nLog levels\r\n----------\r\nThe following log levels exist sorted by level importance (highest first):\r\n\r\n* Log.Level.FATAL\r\n* Log.Level.ERROR\r\n* Log.Level.WARN\r\n* Log.Level.INFO\r\n* Log.Level.DEBUG\r\n* Log.Level.TRACE\r\n\r\nThere is also *Log.Level.ALL* which will log for all log levels and *Log.Level.OFF* which completely suppresses logging.\r\n\r\n\r\nAdapters\r\n--------\r\nYou can pass any adapter you like into the Log constructor as third argument.\r\n\r\n### ConsoleAdapter\r\nThis **default adapter** will make use of the [Console API](https://getfirebug.com/wiki/index.php/Console_API) usually available for common environments.\r\n\r\nIt will log the messages to the *console* object supporting its methods for different log levels.\r\n\r\n### FileAdapter\r\nA FileAdapter is created by `new FileAdapter(filepath, options)`.\r\n\r\nThe optional *options* are:\r\n* **nocache**  \r\nThe default behavior is to open a file once to avoid write concurrency.\r\nThis options disables this behavior.\r\n\r\n* **overwrite**  \r\nInstead of appending to a file, overwrite it on opening.\r\n\r\n* **openFlags**  \r\nFor more file opening control you can pass the exact open flags with this option.\r\n\r\n* **mode**  \r\nThe file open mode, defaults to 0644.\r\n\r\n### TeeAdapter\r\nUsage: `adapter = new TeeAdapter(adapter1, adapter2, ...)`\r\n\r\nThis is a pseudo adapter which just passes the adapter calls to all adapters given in the constructor.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}