// Generated by CoffeeScript 1.3.3
(function() {
  var FileAdapter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = FileAdapter = (function(_super) {
    var cache, cachedFile, fs, name, openFile, path, _fn, _i, _len, _ref;

    __extends(FileAdapter, _super);

    'use strict';


    fs = require('fs');

    path = require('path');

    cache = {};

    openFile = function(filename, opts) {
      var filepath, _ref, _ref1;
      filepath = path.resolve(filename);
      return cache[filepath] = fs.openSync(filepath, (_ref = opts.openFlags) != null ? _ref : (opts.overwrite ? 'w' : 'a'), (_ref1 = opts.mode) != null ? _ref1 : 0x1a4);
    };

    cachedFile = function(filename, opts) {
      var filepath, _ref;
      filepath = path.resolve(filename);
      return (_ref = cache[filepath]) != null ? _ref : openFile(filepath, opts);
    };

    function FileAdapter(filename, opts) {
      if (opts == null) {
        opts = {};
      }
      FileAdapter.__super__.constructor.apply(this, arguments);
      this.fd = opts.nocache ? openFile(filename, opts) : cachedFile(filename, opts);
    }

    FileAdapter.prototype.toString = function() {
      return 'FileAdapter';
    };

    FileAdapter.prototype.close = function() {
      try {
        return fs.closeSync(this.fd);
      } catch (_error) {}
    };

    _ref = 'fatal error warn info debug trace'.split(' ');
    _fn = function(name) {
      return FileAdapter.prototype["_" + name] = function(msg) {
        msg = msg.replace("\n", "\n    ");
        return fs.writeSync(this.fd, "" + msg + "\n");
      };
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _fn(name);
    }

    return FileAdapter;

  })(require('./Adapter'));

}).call(this);
