// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = (function() {
    'use strict';
    var FileLogger;
    return FileLogger = (function(_super) {
      var KEYS_BASEDIR, KEYS_FILENAME, cache, fs, path;

      __extends(FileLogger, _super);

      fs = require('fs');

      path = require('path');

      KEYS_FILENAME = ['filename', 'fileName', 'file'];

      KEYS_BASEDIR = ['basedir', 'baseDir', 'dir'];

      cache = {};

      FileLogger.closeAllOpenFiles = function() {
        var fd, _;
        for (_ in cache) {
          fd = cache[_];
          try {
            fs.closeSync(fd);
          } catch (_error) {}
        }
        cache = {};
      };

      FileLogger._maskMode = function(mode) {
        return mode & (~process.umask());
      };

      FileLogger._getModes = function(openMode) {
        var dirMode, msk;
        if (openMode != null) {
          msk = function(test, setflag) {
            return openMode | (openMode & test ? setflag : 0);
          };
          dirMode = msk(0x6, 0x1) | msk(0x30, 0x8) | msk(0x180, 0x40);
        } else {
          openMode = FileLogger._maskMode(0x1a4);
          dirMode = FileLogger._maskMode(0x1ed);
        }
        return [openMode, dirMode];
      };

      process.on('exit', FileLogger.closeAllOpenFiles);

      function FileLogger(config) {
        var basedir, dirMode, filedir, filepath, key, openFlags, openMode, value, _ref, _ref1, _ref2, _ref3;
        FileLogger.__super__.constructor.apply(this, arguments);
        this.filename = config.getOption.apply(config, KEYS_FILENAME) || 'logging.log';
        basedir = config.getOption.apply(config, KEYS_BASEDIR) || '.';
        this.throwErrors = (_ref = config.getOption('throwErrors')) != null ? _ref : false;
        filepath = path.resolve(basedir, this.filename);
        this.fd = cache[filepath];
        if (this.fd == null) {
          _ref2 = (_ref1 = config.getOptionWithKey('flags', 'overwrite', 'append')) != null ? _ref1 : {
            key: 'append',
            value: true
          }, key = _ref2.key, value = _ref2.value;
          openFlags = key === 'flags' ? value : (key === 'overwrite' && value) || (key === 'append' && !value) ? 'w' : 'a';
          _ref3 = FileLogger._getModes(config.getOption('mode')), openMode = _ref3[0], dirMode = _ref3[1];
          filedir = path.dirname(filepath);
          if (!fs.existsSync(filedir)) {
            require('mkdirp').sync(filedir, dirMode);
          }
          this.fd = cache[filepath] = fs.openSync(filepath, openFlags, openMode);
        }
      }

      FileLogger.prototype.log = function(line) {
        var e;
        try {
          fs.writeSync(this.fd, "" + line + "\n");
        } catch (_error) {
          e = _error;
          if (this.throwErrors) {
            throw e;
          }
        }
      };

      FileLogger.prototype.toString = function() {
        return "FileLogger[" + this.filename + "]";
      };

      return FileLogger;

    }).call(this, require('./AbstractLogger'));
  })();

}).call(this);
