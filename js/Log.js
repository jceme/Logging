// Generated by CoffeeScript 1.3.3
(function() {
  var Log;

  module.exports = Log = (function() {
    'use strict';

    var ConsoleAdapter, FileAdapter, TeeAdapter, createAdapter, getLevel, initLogging, key, lcrev, levels, log, rev, shift, val, _ref;

    ConsoleAdapter = require('./adapters/ConsoleAdapter');

    FileAdapter = require('./adapters/FileAdapter');

    TeeAdapter = require('./adapters/TeeAdapter');

    Log.Level = {
      OFF: 0,
      FATAL: 1,
      ERROR: 2,
      WARN: 3,
      INFO: 4,
      DEBUG: 5,
      TRACE: 6,
      ALL: 100
    };

    Log.DEFAULT_LEVEL = Log.Level.INFO;

    Log.DEFAULT_ADAPTER = new ConsoleAdapter();

    Log.LOGFILE_NAME = 'logconf.json';

    levels = null;

    rev = {};

    lcrev = {};

    _ref = Log.Level;
    for (key in _ref) {
      val = _ref[key];
      if ((Log.Level.OFF < val && val < Log.Level.ALL)) {
        (function(key, val) {
          var lckey;
          rev[val] = key;
          lcrev[val] = lckey = key.toLowerCase();
          return Log.prototype[lckey] = function() {
            return log.call(this, Log.Level[key], arguments);
          };
        })(key, val);
      }
    }

    getLevel = function(levelname, deflevel) {
      var _ref1;
      return (_ref1 = Log.Level[(levelname || '').toUpperCase()]) != null ? _ref1 : deflevel;
    };

    initLogging = function(json) {
      var adapter, adapters, lvl, name, _ref1, _ref2, _ref3;
      if (typeof json === 'string') {
        json = JSON.parse(json);
      }
      adapters = ((_ref1 = json.adapters) != null ? _ref1 : json.adapter) || [];
      if (adapters.length) {
        Log.DEFAULT_ADAPTER = adapters.length === 1 ? createAdapter(adapters[0]) : new TeeAdapter((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = adapters.length; _i < _len; _i++) {
            adapter = adapters[_i];
            _results.push(createAdapter(adapter));
          }
          return _results;
        })());
      }
      levels = {};
      _ref3 = ((_ref2 = json.levels) != null ? _ref2 : json.level) || {};
      for (name in _ref3) {
        lvl = _ref3[name];
        if ((lvl = getLevel(lvl)) != null) {
          if (name) {
            levels[name] = lvl;
          } else {
            Log.DEFAULT_LEVEL = lvl;
          }
        }
      }
    };

    createAdapter = function(conf) {
      var adapter, max, min, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      adapter = (function() {
        var _ref1;
        switch (conf != null ? conf.type : void 0) {
          case 'FileAdapter':
            return new FileAdapter(((_ref1 = conf.file) != null ? _ref1 : conf.filename) || 'logging.log', conf.opts);
          default:
            return new ConsoleAdapter();
        }
      })();
      min = getLevel((_ref1 = (_ref2 = (_ref3 = conf.min) != null ? _ref3 : conf.minLevel) != null ? _ref2 : conf.minlevel) != null ? _ref1 : conf.minimumLevel, Log.Level.ALL);
      max = getLevel((_ref4 = (_ref5 = (_ref6 = conf.max) != null ? _ref6 : conf.maxLevel) != null ? _ref5 : conf.maxlevel) != null ? _ref4 : conf.maximumLevel, Log.Level.OFF);
      adapter.minLevel = Math.min(min, max);
      adapter.maxLevel = Math.max(min, max);
      return adapter;
    };

    Log.init = function(file) {
      var dir, fs, last, p, path, _ref1;
      try {
        fs = require('fs');
        path = require('path');
        if (file == null) {
          dir = '.';
          last = null;
          while (true) {
            p = path.resolve(dir, Log.LOGFILE_NAME);
            if (p === last) {
              break;
            }
            if (fs.existsSync(p) && fs.statSync(p).isFile()) {
              initLogging(fs.readFileSync(p).toString());
              break;
            }
            last = p;
            dir = dir === '.' ? '..' : "" + dir + "/..";
          }
        } else if (typeof file === 'string') {
          initLogging(fs.readFileSync(file).toString());
        } else {
          initLogging(file);
        }
      } catch (e) {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.log === "function") {
            console.log("Error while initializing logging: " + ((_ref1 = e.stack) != null ? _ref1 : e));
          }
        }
      }
    };

    Log.init();

    function Log(name, level, adapter) {
      this.name = name;
      this.level = level != null ? level : Log.DEFAULT_LEVEL;
      this.adapter = adapter != null ? adapter : Log.DEFAULT_ADAPTER;
      if (!name) {
        throw new Error('Log name required');
      }
    }

    Log.prototype.toString = function() {
      return "Log[" + this.name + " at level " + rev[this.level] + "]";
    };

    shift = [].shift;

    log = function(level, args) {
      var func, msg,
        _this = this;
      if (level <= this.level) {
        msg = shift.call(args);
        func = typeof msg === "function" ? msg.length > 0 ? msg : function(done) {
          return done(msg());
        } : function(done) {
          var i;
          i = 0;
          return done(("" + msg).replace(/\{(?:(\d*)| (.*?))\}/g, function(_, idx, str) {
            if (idx == null) {
              return str;
            } else {
              return args[idx === '' ? i++ : parseInt(idx)];
            }
          }));
        };
        func(function(msg) {
          return _this.adapter[lcrev[level]]("[" + rev[level] + "] " + _this.name + ": " + msg);
        });
      }
    };

    return Log;

  })();

}).call(this);
